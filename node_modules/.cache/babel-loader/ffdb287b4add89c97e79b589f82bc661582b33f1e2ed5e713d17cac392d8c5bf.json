{"ast":null,"code":"\"use client\";\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleClientScriptLoad = handleClientScriptLoad;\nexports.initScriptLoader = initScriptLoader;\nexports.default = void 0;\nvar _extends = require(\"@swc/helpers/lib/_extends.js\").default;\nvar _interop_require_default = require(\"@swc/helpers/lib/_interop_require_default.js\").default;\nvar _interop_require_wildcard = require(\"@swc/helpers/lib/_interop_require_wildcard.js\").default;\nvar _object_without_properties_loose = require(\"@swc/helpers/lib/_object_without_properties_loose.js\").default;\nvar _reactDom = _interop_require_default(require(\"react-dom\"));\nvar _react = _interop_require_wildcard(require(\"react\"));\nvar _headManagerContext = require(\"../shared/lib/head-manager-context\");\nvar _headManager = require(\"./head-manager\");\nvar _requestIdleCallback = require(\"./request-idle-callback\");\n'use client';\nconst ScriptCache = new Map();\nconst LoadCache = new Set();\nconst ignoreProps = ['onLoad', 'onReady', 'dangerouslySetInnerHTML', 'children', 'onError', 'strategy'];\nconst loadScript = props => {\n  const {\n    src,\n    id,\n    onLoad = () => {},\n    onReady = null,\n    dangerouslySetInnerHTML,\n    children = '',\n    strategy = 'afterInteractive',\n    onError\n  } = props;\n  const cacheKey = id || src;\n  // Script has already loaded\n  if (cacheKey && LoadCache.has(cacheKey)) {\n    return;\n  }\n  // Contents of this script are already loading/loaded\n  if (ScriptCache.has(src)) {\n    LoadCache.add(cacheKey);\n    // It is possible that multiple `next/script` components all have same \"src\", but has different \"onLoad\"\n    // This is to make sure the same remote script will only load once, but \"onLoad\" are executed in order\n    ScriptCache.get(src).then(onLoad, onError);\n    return;\n  }\n  /** Execute after the script first loaded */\n  const afterLoad = () => {\n    // Run onReady for the first time after load event\n    if (onReady) {\n      onReady();\n    }\n    // add cacheKey to LoadCache when load successfully\n    LoadCache.add(cacheKey);\n  };\n  const el = document.createElement('script');\n  const loadPromise = new Promise((resolve, reject) => {\n    el.addEventListener('load', function (e) {\n      resolve();\n      if (onLoad) {\n        onLoad.call(this, e);\n      }\n      afterLoad();\n    });\n    el.addEventListener('error', function (e) {\n      reject(e);\n    });\n  }).catch(function (e) {\n    if (onError) {\n      onError(e);\n    }\n  });\n  if (dangerouslySetInnerHTML) {\n    el.innerHTML = dangerouslySetInnerHTML.__html || '';\n    afterLoad();\n  } else if (children) {\n    el.textContent = typeof children === 'string' ? children : Array.isArray(children) ? children.join('') : '';\n    afterLoad();\n  } else if (src) {\n    el.src = src;\n    // do not add cacheKey into LoadCache for remote script here\n    // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)\n    ScriptCache.set(src, loadPromise);\n  }\n  for (const [k, value] of Object.entries(props)) {\n    if (value === undefined || ignoreProps.includes(k)) {\n      continue;\n    }\n    const attr = _headManager.DOMAttributeNames[k] || k.toLowerCase();\n    el.setAttribute(attr, value);\n  }\n  if (strategy === 'worker') {\n    el.setAttribute('type', 'text/partytown');\n  }\n  el.setAttribute('data-nscript', strategy);\n  document.body.appendChild(el);\n};\nfunction handleClientScriptLoad(props) {\n  const {\n    strategy = 'afterInteractive'\n  } = props;\n  if (strategy === 'lazyOnload') {\n    window.addEventListener('load', () => {\n      (0, _requestIdleCallback).requestIdleCallback(() => loadScript(props));\n    });\n  } else {\n    loadScript(props);\n  }\n}\nfunction loadLazyScript(props) {\n  if (document.readyState === 'complete') {\n    (0, _requestIdleCallback).requestIdleCallback(() => loadScript(props));\n  } else {\n    window.addEventListener('load', () => {\n      (0, _requestIdleCallback).requestIdleCallback(() => loadScript(props));\n    });\n  }\n}\nfunction addBeforeInteractiveToCache() {\n  const scripts = [...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'), ...document.querySelectorAll('[data-nscript=\"beforePageRender\"]')];\n  scripts.forEach(script => {\n    const cacheKey = script.id || script.getAttribute('src');\n    LoadCache.add(cacheKey);\n  });\n}\nfunction initScriptLoader(scriptLoaderItems) {\n  scriptLoaderItems.forEach(handleClientScriptLoad);\n  addBeforeInteractiveToCache();\n}\nfunction Script(props) {\n  const {\n      id,\n      src = '',\n      onLoad = () => {},\n      onReady = null,\n      strategy = 'afterInteractive',\n      onError\n    } = props,\n    restProps = _object_without_properties_loose(props, [\"id\", \"src\", \"onLoad\", \"onReady\", \"strategy\", \"onError\"]);\n  // Context is available only during SSR\n  const {\n    updateScripts,\n    scripts,\n    getIsSsr,\n    appDir,\n    nonce\n  } = (0, _react).useContext(_headManagerContext.HeadManagerContext);\n  /**\n  * - First mount:\n  *   1. The useEffect for onReady executes\n  *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)\n  *      onReady is skipped, set hasOnReadyEffectCalled.current to true\n  *   3. The useEffect for loadScript executes\n  *   4. hasLoadScriptEffectCalled.current is false, loadScript executes\n  *      Once the script is loaded, the onLoad and onReady will be called by then\n  *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n  *   5. The useEffect for onReady executes again\n  *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n  *   7. The useEffect for loadScript executes again\n  *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n  *\n  * - Second mount:\n  *   1. The useEffect for onReady executes\n  *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)\n  *      onReady is called, set hasOnReadyEffectCalled.current to true\n  *   3. The useEffect for loadScript executes\n  *   4. The script is already loaded, loadScript bails out\n  *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n  *   5. The useEffect for onReady executes again\n  *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n  *   7. The useEffect for loadScript executes again\n  *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n  */\n  const hasOnReadyEffectCalled = (0, _react).useRef(false);\n  (0, _react).useEffect(() => {\n    const cacheKey = id || src;\n    if (!hasOnReadyEffectCalled.current) {\n      // Run onReady if script has loaded before but component is re-mounted\n      if (onReady && cacheKey && LoadCache.has(cacheKey)) {\n        onReady();\n      }\n      hasOnReadyEffectCalled.current = true;\n    }\n  }, [onReady, id, src]);\n  const hasLoadScriptEffectCalled = (0, _react).useRef(false);\n  (0, _react).useEffect(() => {\n    if (!hasLoadScriptEffectCalled.current) {\n      if (strategy === 'afterInteractive') {\n        loadScript(props);\n      } else if (strategy === 'lazyOnload') {\n        loadLazyScript(props);\n      }\n      hasLoadScriptEffectCalled.current = true;\n    }\n  }, [props, strategy]);\n  if (strategy === 'beforeInteractive' || strategy === 'worker') {\n    if (updateScripts) {\n      scripts[strategy] = (scripts[strategy] || []).concat([_extends({\n        id,\n        src,\n        onLoad,\n        onReady,\n        onError\n      }, restProps)]);\n      updateScripts(scripts);\n    } else if (getIsSsr && getIsSsr()) {\n      // Script has already loaded during SSR\n      LoadCache.add(id || src);\n    } else if (getIsSsr && !getIsSsr()) {\n      loadScript(props);\n    }\n  }\n  // For the app directory, we need React Float to preload these scripts.\n  if (appDir) {\n    // Before interactive scripts need to be loaded by Next.js' runtime instead\n    // of native <script> tags, because they no longer have `defer`.\n    if (strategy === 'beforeInteractive') {\n      if (!src) {\n        // For inlined scripts, we put the content in `children`.\n        if (restProps.dangerouslySetInnerHTML) {\n          restProps.children = restProps.dangerouslySetInnerHTML.__html;\n          delete restProps.dangerouslySetInnerHTML;\n        }\n        return /*#__PURE__*/_react.default.createElement(\"script\", {\n          nonce: nonce,\n          dangerouslySetInnerHTML: {\n            __html: `(self.__next_s=self.__next_s||[]).push(${JSON.stringify([0, _extends({}, restProps)])})`\n          }\n        });\n      }\n      // @ts-ignore\n      _reactDom.default.preload(src, restProps.integrity ? {\n        as: 'script',\n        integrity: restProps.integrity\n      } : {\n        as: 'script'\n      });\n      return /*#__PURE__*/_react.default.createElement(\"script\", {\n        nonce: nonce,\n        dangerouslySetInnerHTML: {\n          __html: `(self.__next_s=self.__next_s||[]).push(${JSON.stringify([src])})`\n        }\n      });\n    } else if (strategy === 'afterInteractive') {\n      if (src) {\n        // @ts-ignore\n        _reactDom.default.preload(src, restProps.integrity ? {\n          as: 'script',\n          integrity: restProps.integrity\n        } : {\n          as: 'script'\n        });\n      }\n    }\n  }\n  return null;\n}\nObject.defineProperty(Script, '__nextScript', {\n  value: true\n});\nvar _default = Script;\nexports.default = _default;\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"mappings":"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","names":["initScriptLoader","ScriptCache","LoadCache","Set","ignoreProps","loadScript","props","onLoad","cacheKey","id","src","onReady","dangerouslySetInnerHTML","children","strategy","onError","add","loadPromise","createElement","resolve","reject","addEventListener","Promise","call","afterLoad","el","catch","e","textContent","value","undefined","includes","setAttribute","document","appendChild","handleClientScriptLoad","window","requestIdleCallback","readyState","_requestIdleCallback","addBeforeInteractiveToCache","querySelectorAll","scripts","script","scriptLoaderItems","forEach","Script","restProps","updateScripts","getIsSsr","appDir","nonce","useEffect","_react","hasOnReadyEffectCalled","hasLoadScriptEffectCalled","loadLazyScript","__html","_extends","ReactDOM","integrity","as","Object"],"sources":["../../client/script.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}